{"version":3,"file":"settings.js","sources":["../../src/plugins/settings/constants.js","../../src/plugins/settings/SettingsButton.js","../../src/plugins/settings/index.js"],"sourcesContent":["import check from './check.svg';\nimport chevron from './chevron.svg';\nimport switchOff from './switch-off.svg';\nimport switchOn from './switch-on.svg';\n\n/**\n * @summary Available events\n * @enum {string}\n * @memberof PSV.plugins.ResolutionPlugin\n * @constant\n */\nexport const EVENTS = {\n  /**\n   * @event setting-changed\n   * @memberof PSV.plugins.SettingsPlugin\n   * @summary Triggered when a setting is changed\n   * @param {string} settingId\n   * @param {any} value\n   */\n  SETTING_CHANGED: 'setting-changed',\n};\n\n\n/**\n * @summary Panel identifier for settings content\n * @type {string}\n * @constant\n * @private\n */\nexport const ID_PANEL = 'settings';\n\n/**\n * @summary Property name added to settings items\n * @type {string}\n * @constant\n * @private\n */\nexport const SETTING_DATA = 'settingId';\n\n/**\n * @summary Setting item template, by type\n * @constant\n * @private\n */\nexport const SETTINGS_TEMPLATE_ = {\n  options: (setting, optionsCurrent) => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n      <span class=\"psv-settings-item-value\">${optionsCurrent(setting)}</span>\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\n    `,\n  toggle : setting => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n      <span class=\"psv-settings-item-value\">${setting.active() ? switchOn : switchOff}</span>\n    `,\n};\n\n/**\n * @summary Settings list template\n * @param {PSV.plugins.SettingsPlugin.Setting[]} settings\n * @param {string} dataKey\n * @param {function} optionsCurrent\n * @returns {string}\n * @constant\n * @private\n */\nexport const SETTINGS_TEMPLATE = (settings, dataKey, optionsCurrent) => `\n<div class=\"psv-panel-menu psv-settings-menu\">\n  <ul class=\"psv-panel-menu-list\">\n    ${settings.map(s => `\n      <li class=\"psv-panel-menu-item\" data-${dataKey}=\"${s.id}\">\n        ${SETTINGS_TEMPLATE_[s.type](s, optionsCurrent)}\n      </li>\n    `).join('')}\n  </ul>\n</div>\n`;\n\n/**\n * @summary Settings options template\n * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n * @param {string} dataKey\n * @param {function} optionActive\n * @returns {string}\n * @constant\n * @private\n */\nexport const SETTING_OPTIONS_TEMPLATE = (setting, dataKey, optionActive) => `\n<div class=\"psv-panel-menu psv-settings-menu\">\n  <ul class=\"psv-panel-menu-list\">\n    <li class=\"psv-panel-menu-item psv-settings-item--header\" data-${dataKey}=\"__back\">\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n    </li>\n    ${setting.options().map(s => `\n      <li class=\"psv-panel-menu-item\" data-${dataKey}=\"${s.id}\">\n        <span class=\"psv-settings-item-icon\">${optionActive(s) ? check : ''}</span>\n        <span class=\"psv-settings-item-value\">${s.label}</span>\n      </li>\n    `).join('')}\n  </ul>\n</div>\n`;\n","import { AbstractButton, CONSTANTS } from '../..';\nimport { ID_PANEL } from './constants';\nimport icon from './settings.svg';\n\n/**\n * @summary Navigation bar settings button class\n * @extends PSV.buttons.AbstractButton\n * @memberof PSV.buttons\n */\nexport class SettingsButton extends AbstractButton {\n\n  static id = 'settings';\n  static icon = icon;\n\n  /**\n   * @param {PSV.components.Navbar} navbar\n   */\n  constructor(navbar) {\n    super(navbar, 'psv-button--hover-scale psv-settings-button', true);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @private\n     * @readonly\n     */\n    this.plugin = this.psv.getPlugin('settings');\n\n    /**\n     * @member {HTMLElement}\n     * @private\n     * @readonly\n     */\n    this.badge = document.createElement('div');\n    this.badge.className = 'psv-settings-badge';\n    this.badge.style.display = 'none';\n    this.container.appendChild(this.badge);\n\n    if (this.plugin) {\n      this.psv.on(CONSTANTS.EVENTS.OPEN_PANEL, this);\n      this.psv.on(CONSTANTS.EVENTS.CLOSE_PANEL, this);\n    }\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.OPEN_PANEL, this);\n    this.psv.off(CONSTANTS.EVENTS.CLOSE_PANEL, this);\n\n    delete this.plugin;\n\n    super.destroy();\n  }\n\n  /**\n   * @override\n   */\n  isSupported() {\n    return !!this.plugin;\n  }\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      // @formatter:off\n      case CONSTANTS.EVENTS.OPEN_PANEL:  this.toggleActive(e.args[0] === ID_PANEL); break;\n      case CONSTANTS.EVENTS.CLOSE_PANEL: this.toggleActive(false); break;\n      // @formatter:on\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @override\n   * @description Toggles settings\n   */\n  onClick() {\n    this.plugin.toggleSettings();\n  }\n\n  /**\n   * @summary Changes the badge value\n   * @param {string} value\n   */\n  setBadge(value) {\n    this.badge.innerText = value;\n    this.badge.style.display = value ? '' : 'none';\n  }\n\n}\n","import { AbstractPlugin, DEFAULTS, PSVError, registerButton, utils } from '../..';\nimport {\n  EVENTS,\n  ID_PANEL,\n  SETTING_DATA,\n  SETTING_OPTIONS_TEMPLATE,\n  SETTINGS_TEMPLATE,\n  SETTINGS_TEMPLATE_\n} from './constants';\nimport { SettingsButton } from './SettingsButton';\nimport './style.scss';\n\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Setting\n * @summary Description of a setting\n * @property {string} id - identifier of the setting\n * @property {string} label - label of the setting\n * @property {'options' | 'toggle'} type - type of the setting\n * @property {function} [badge] - function which returns the value of the button badge\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.OptionsSetting\n * @summary Description of a 'options' setting\n * @property {'options'} type - type of the setting\n * @property {function} current - function which returns the current option id\n * @property {function} options - function which the possible options as an array of {@link PSV.plugins.SettingsPlugin.Option}\n * @property {function} apply - function called with the id of the selected option\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.ToggleSetting\n * @summary Description of a 'toggle' setting\n * @property {'toggle'} type - type of the setting\n * @property {function} active - function which return whereas the setting is active or not\n * @property {function} toggle - function called when the setting is toggled\n */\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Option\n * @summary Option of an 'option' setting\n * @property {string} id - identifier of the option\n * @property {string} label - label of the option\n */\n\n\n// add settings button\nDEFAULTS.lang[SettingsButton.id] = 'Settings';\nregisterButton(SettingsButton, 'fullscreen:left');\n\n\nexport { EVENTS } from './constants';\n\n\n/**\n * @summary Adds a button to access various settings.\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class SettingsPlugin extends AbstractPlugin {\n\n  static id = 'settings';\n\n  static EVENTS = EVENTS;\n\n  /**\n   * @param {PSV.Viewer} psv\n   */\n  constructor(psv) {\n    super(psv);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin.Setting[]}\n     * @private\n     */\n    this.settings = [];\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    // buttons are initialized just after plugins\n    setTimeout(() => this.updateBadge());\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.settings.length = 0;\n\n    super.destroy();\n  }\n\n  /**\n   * @summary Registers a new setting\n   * @param {PSV.plugins.SettingsPlugin.Setting} setting\n   */\n  addSetting(setting) {\n    if (!setting.id) {\n      throw new PSVError('Missing setting id');\n    }\n    if (!setting.type) {\n      throw new PSVError('Missing setting type');\n    }\n    if (!SETTINGS_TEMPLATE_[setting.type]) {\n      throw new PSVError('Unsupported setting type');\n    }\n\n    if (setting.badge && this.settings.some(s => s.badge)) {\n      utils.logWarn('More than one setting with a badge are declared, the result is unpredictable.');\n    }\n\n    this.settings.push(setting);\n\n    if (this.psv.panel.prop.contentId === ID_PANEL) {\n      this.showSettings();\n    }\n\n    this.updateBadge();\n  }\n\n  /**\n   * @summary Removes a setting\n   * @param {string} id\n   */\n  removeSetting(id) {\n    const idx = this.settings.findIndex(setting => setting.id === id);\n    if (idx !== -1) {\n      this.settings.splice(idx, 1);\n\n      if (this.psv.panel.prop.contentId === ID_PANEL) {\n        this.showSettings();\n      }\n\n      this.updateBadge();\n    }\n  }\n\n  /**\n   * @summary Toggles the settings panel\n   */\n  toggleSettings() {\n    if (this.psv.panel.prop.contentId === ID_PANEL) {\n      this.hideSettings();\n    }\n    else {\n      this.showSettings();\n    }\n  }\n\n  /**\n   * @summary Hides the settings panel\n   */\n  hideSettings() {\n    this.psv.panel.hide(ID_PANEL);\n  }\n\n  /**\n   * @summary Shows the settings panel\n   */\n  showSettings() {\n    this.psv.panel.show({\n      id          : ID_PANEL,\n      content     : SETTINGS_TEMPLATE(\n        this.settings,\n        utils.dasherize(SETTING_DATA),\n        (setting) => { // retrocompatibility with \"current\" returning a label\n          const current = setting.current();\n          const option = setting.options().find(opt => opt.id === current);\n          return option?.label || current;\n        }\n      ),\n      noMargin    : true,\n      clickHandler: (e) => {\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\n        const settingId = li ? li.dataset[SETTING_DATA] : undefined;\n        const setting = this.settings.find(s => s.id === settingId);\n\n        if (setting) {\n          switch (setting.type) {\n            case 'toggle':\n              setting.toggle();\n              this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.active());\n              this.showSettings();\n              this.updateBadge();\n              break;\n\n            case 'options':\n              this.__showOptions(setting);\n              break;\n\n            default:\n            // noop\n          }\n        }\n      },\n    });\n  }\n\n  /**\n   * @summary Shows setting options panel\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n   * @private\n   */\n  __showOptions(setting) {\n    const current = setting.current();\n\n    this.psv.panel.show({\n      id          : ID_PANEL,\n      content     : SETTING_OPTIONS_TEMPLATE(\n        setting,\n        utils.dasherize(SETTING_DATA),\n        (option) => { // retrocompatibility with options having an \"active\" flag\n          return 'active' in option ? option.active : option.id === current;\n        }\n      ),\n      noMargin    : true,\n      clickHandler: (e) => {\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\n        const optionId = li ? li.dataset[SETTING_DATA] : undefined;\n\n        if (optionId === '__back') {\n          this.showSettings();\n        }\n        else {\n          setting.apply(optionId);\n          this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.current());\n          this.hideSettings();\n          this.updateBadge();\n        }\n      },\n    });\n  }\n\n  /**\n   * @summary Updates the badge in the button\n   */\n  updateBadge() {\n    const value = this.settings.find(s => s.badge)?.badge();\n    this.psv.navbar.getButton(SettingsButton.id, false)?.setBadge(value);\n  }\n\n}\n"],"names":["EVENTS","SETTING_CHANGED","ID_PANEL","SETTING_DATA","SETTINGS_TEMPLATE_","options","setting","optionsCurrent","label","chevron","toggle","active","switchOn","switchOff","SETTINGS_TEMPLATE","settings","dataKey","map","s","id","type","join","SETTING_OPTIONS_TEMPLATE","optionActive","check","SettingsButton","navbar","plugin","psv","getPlugin","badge","document","createElement","className","style","display","container","appendChild","on","CONSTANTS","OPEN_PANEL","CLOSE_PANEL","destroy","off","isSupported","handleEvent","e","toggleActive","args","onClick","toggleSettings","setBadge","value","innerText","AbstractButton","icon","DEFAULTS","lang","registerButton","SettingsPlugin","init","setTimeout","updateBadge","length","addSetting","PSVError","some","utils","logWarn","push","panel","prop","contentId","showSettings","removeSetting","idx","findIndex","splice","hideSettings","hide","show","content","dasherize","current","option","find","opt","noMargin","clickHandler","li","target","getClosest","undefined","settingId","dataset","trigger","__showOptions","optionId","apply","getButton","AbstractPlugin"],"mappings":"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"}