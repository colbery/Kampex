{"version":3,"file":"cubemap-tiles.js","sources":["../../src/adapters/shared/Task.js","../../src/adapters/shared/Queue.js","../../src/adapters/shared/tiles-utils.js","../../src/adapters/cubemap-tiles/index.js"],"sourcesContent":["/**\n * @summary Loading task\n * @memberOf PSV.adapters\n * @private\n */\nexport class Task {\n\n  static STATUS = {\n    DISABLED : -1,\n    PENDING  : 0,\n    RUNNING  : 1,\n    CANCELLED: 2,\n    DONE     : 3,\n    ERROR    : 4,\n  };\n\n  /**\n   * @param {string} id\n   * @param {number} priority\n   * @param {function(Task): Promise} fn\n   */\n  constructor(id, priority, fn) {\n    this.id = id;\n    this.priority = priority;\n    this.fn = fn;\n    this.status = Task.STATUS.PENDING;\n  }\n\n  start() {\n    this.status = Task.STATUS.RUNNING;\n    return this.fn(this)\n      .then(() => {\n        this.status = Task.STATUS.DONE;\n      }, () => {\n        this.status = Task.STATUS.ERROR;\n      });\n  }\n\n  cancel() {\n    this.status = Task.STATUS.CANCELLED;\n  }\n\n  isCancelled() {\n    return this.status === Task.STATUS.CANCELLED;\n  }\n\n}\n","import { Task } from './Task';\n\n/**\n * @summary Loading queue\n * @memberOf PSV.adapters\n * @private\n */\nexport class Queue {\n\n  /**\n   * @param {int} concurency\n   */\n  constructor(concurency = 4) {\n    this.concurency = concurency;\n    this.runningTasks = {};\n    this.tasks = {};\n  }\n\n  enqueue(task) {\n    this.tasks[task.id] = task;\n  }\n\n  clear() {\n    Object.values(this.tasks).forEach(task => task.cancel());\n    this.tasks = {};\n    this.runningTasks = {};\n  }\n\n  setPriority(taskId, priority) {\n    const task = this.tasks[taskId];\n    if (task) {\n      task.priority = priority;\n      if (task.status === Task.STATUS.DISABLED) {\n        task.status = Task.STATUS.PENDING;\n      }\n    }\n  }\n\n  disableAllTasks() {\n    Object.values(this.tasks).forEach((task) => {\n      task.status = Task.STATUS.DISABLED;\n    });\n  }\n\n  start() {\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\n      return;\n    }\n\n    const nextTask = Object.values(this.tasks)\n      .filter(task => task.status === Task.STATUS.PENDING)\n      .sort((a, b) => b.priority - a.priority)\n      .pop();\n\n    if (nextTask) {\n      this.runningTasks[nextTask.id] = true;\n\n      nextTask.start()\n        .then(() => {\n          if (!nextTask.isCancelled()) {\n            delete this.tasks[nextTask.id];\n            delete this.runningTasks[nextTask.id];\n            this.start();\n          }\n        });\n\n      this.start(); // start tasks until max concurrency is reached\n    }\n  }\n\n}\n","import * as THREE from 'three';\nimport { SYSTEM, utils } from '../..';\n\n/**\n * @summary Generates an material for errored tiles\n * @memberOf PSV.adapters\n * @return {external:THREE.MeshBasicMaterial}\n * @private\n */\nexport function buildErrorMaterial(width, height) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n\n  ctx.fillStyle = '#333';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.font = `${canvas.width / 5}px serif`;\n  ctx.fillStyle = '#a22';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('âš ', canvas.width / 2, canvas.height / 2);\n\n  const texture = new THREE.CanvasTexture(canvas);\n  return new THREE.MeshBasicMaterial({ map: texture });\n}\n\n/**\n * @summary Create the texture for the base image\n * @memberOf PSV.adapters\n * @param {HTMLImageElement} img\n * @param {boolean} blur\n * @param {function} getHeight\n * @return {external:THREE.Texture}\n * @private\n */\nexport function createBaseTexture(img, blur, getHeight) {\n  if (blur || img.width > SYSTEM.maxTextureWidth) {\n    const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\n\n    const buffer = document.createElement('canvas');\n    buffer.width = img.width * ratio;\n    buffer.height = getHeight(img.width);\n\n    const ctx = buffer.getContext('2d');\n    if (blur) {\n      ctx.filter = 'blur(1px)';\n    }\n    ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n    return utils.createTexture(buffer);\n  }\n\n  return utils.createTexture(img);\n}\n\n/**\n * @summary Creates a wireframe geometry, for debug\n * @memberOf PSV.adapters\n * @param {THREE.BufferGeometry} geometry\n * @return {THREE.Object3D}\n * @private\n */\nexport function createWireFrame(geometry) {\n  const wireframe = new THREE.WireframeGeometry(geometry);\n  const line = new THREE.LineSegments(wireframe);\n  line.material.depthTest = false;\n  line.material.opacity = 0.25;\n  line.material.transparent = true;\n  return line;\n}\n\n/**\n * @summary Creates a small red sphere, for debug\n * @memberOf PSV.adapters\n * @return {THREE.Object3D}\n * @private\n */\nexport function createDot(x, y, z) {\n  const geom = new THREE.SphereGeometry(0.1);\n  const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n  const mesh = new THREE.Mesh(geom, material);\n  mesh.position.set(x, y, z);\n  return mesh;\n}\n","import * as THREE from 'three';\nimport { CONSTANTS, PSVError, utils } from '../..';\nimport { CUBE_HASHMAP, CubemapAdapter } from '../cubemap';\nimport { Queue } from '../shared/Queue';\nimport { Task } from '../shared/Task';\nimport { buildErrorMaterial, createBaseTexture } from '../shared/tiles-utils';\n\nif (!CubemapAdapter) {\n  throw new PSVError('CubemapAdapter is missing, please load cubemap.js before cubemap-tiles.js');\n}\n\n\n/**\n * @callback TileUrl\n * @summary Function called to build a tile url\n * @memberOf PSV.adapters.CubemapTilesAdapter\n * @param {'left'|'front'|'right'|'back'|'top'|'bottom'} face\n * @param {int} col\n * @param {int} row\n * @returns {string}\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Panorama\n * @summary Configuration of a tiled cubemap\n * @property {PSV.adapters.CubemapAdapter.Cubemap} [baseUrl] - low resolution panorama loaded before tiles\n * @property {int} faceSize - size of a face\n * @property {int} nbTiles - number of tiles on a side of a face\n * @property {PSV.adapters.CubemapTilesAdapter.TileUrl} tileUrl - function to build a tile url\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Options\n * @property {boolean} [flipTopBottom=false] - set to true if the top and bottom faces are not correctly oriented\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Tile\n * @private\n * @property {int} face\n * @property {int} col\n * @property {int} row\n * @property {float} angle\n */\n\n\nconst CUBE_SEGMENTS = 16;\nconst NB_VERTICES_BY_FACE = 6;\nconst NB_VERTICES_BY_PLANE = NB_VERTICES_BY_FACE * CUBE_SEGMENTS * CUBE_SEGMENTS;\nconst NB_VERTICES = 6 * NB_VERTICES_BY_PLANE;\nconst NB_GROUPS_BY_FACE = CUBE_SEGMENTS * CUBE_SEGMENTS;\n\nconst ATTR_UV = 'uv';\nconst ATTR_ORIGINAL_UV = 'originaluv';\nconst ATTR_POSITION = 'position';\n\nfunction tileId(tile) {\n  return `${tile.face}:${tile.col}x${tile.row}`;\n}\n\nconst frustum = new THREE.Frustum();\nconst projScreenMatrix = new THREE.Matrix4();\nconst vertexPosition = new THREE.Vector3();\n\n/**\n * @summary Adapter for tiled cubemaps\n * @memberof PSV.adapters\n * @extends PSV.adapters.AbstractAdapter\n */\nexport class CubemapTilesAdapter extends CubemapAdapter {\n\n  static id = 'cubemap-tiles';\n  static supportsDownload = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.CubemapTilesAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.adapters.CubemapTilesAdapter.Options}\n     * @private\n     */\n    this.config = {\n      flipTopBottom: false,\n      showErrorTile: true,\n      baseBlur     : true,\n      ...options,\n    };\n\n    /**\n     * @member {PSV.adapters.Queue}\n     * @private\n     */\n    this.queue = new Queue();\n\n    /**\n     * @type {Object}\n     * @property {int} tileSize - size in pixels of a tile\n     * @property {int} facesByTile - number of mesh faces by tile\n     * @property {Record<string, boolean>} tiles - loaded tiles\n     * @property {external:THREE.BoxGeometry} geom\n     * @property {external:THREE.MeshBasicMaterial[]} materials\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\n     * @private\n     */\n    this.prop = {\n      tileSize     : 0,\n      facesByTile  : 0,\n      tiles        : {},\n      geom         : null,\n      materials    : [],\n      errorMaterial: null,\n    };\n\n    /**\n     * @member {external:THREE.ImageLoader}\n     * @private\n     */\n    this.loader = new THREE.ImageLoader();\n    if (this.psv.config.withCredentials) {\n      this.loader.setWithCredentials(true);\n    }\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'object') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders);\n    }\n\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n\n    this.__cleanup();\n\n    this.prop.errorMaterial?.map?.dispose();\n    this.prop.errorMaterial?.dispose();\n\n    delete this.queue;\n    delete this.loader;\n    delete this.prop.geom;\n    delete this.prop.errorMaterial;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        this.__refresh();\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Clears loading queue, dispose all materials\n   * @private\n   */\n  __cleanup() {\n    this.queue.clear();\n    this.prop.tiles = {};\n\n    this.prop.materials.forEach((mat) => {\n      mat?.map?.dispose();\n      mat?.dispose();\n    });\n    this.prop.materials.length = 0;\n  }\n\n  /**\n   * @override\n   */\n  supportsTransition(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   */\n  supportsPreload(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   * @param {PSV.adapters.CubemapTilesAdapter.Panorama} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    if (typeof panorama !== 'object' || !panorama.faceSize || !panorama.nbTiles || !panorama.tileUrl) {\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n    }\n    if (panorama.nbTiles > CUBE_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama nbTiles must not be greater than ${CUBE_SEGMENTS}.`));\n    }\n    if (!utils.isPowerOfTwo(panorama.nbTiles)) {\n      return Promise.reject(new PSVError('Panorama nbTiles must be power of 2.'));\n    }\n\n    if (panorama.baseUrl) {\n      return super.loadTexture(panorama.baseUrl)\n        .then(textureData => ({\n          panorama: panorama,\n          texture : textureData.texture,\n        }));\n    }\n    else {\n      return Promise.resolve({ panorama });\n    }\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\n    const geometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize, CUBE_SEGMENTS, CUBE_SEGMENTS, CUBE_SEGMENTS)\n      .scale(1, 1, -1)\n      .toNonIndexed();\n\n    geometry.clearGroups();\n    for (let i = 0, k = 0; i < NB_VERTICES; i += NB_VERTICES_BY_FACE) {\n      geometry.addGroup(i, NB_VERTICES_BY_FACE, k++);\n    }\n\n    geometry.setAttribute(ATTR_ORIGINAL_UV, geometry.getAttribute(ATTR_UV).clone());\n\n    return new THREE.Mesh(geometry, []);\n  }\n\n  /**\n   * @summary Applies the base texture and starts the loading of tiles\n   * @override\n   */\n  setTexture(mesh, textureData, transition) {\n    const { panorama, texture } = textureData;\n\n    if (transition) {\n      this.__setTexture(mesh, texture);\n      return;\n    }\n\n    this.__cleanup();\n    this.__setTexture(mesh, texture);\n\n    this.prop.materials = mesh.material;\n    this.prop.geom = mesh.geometry;\n    this.prop.geom.setAttribute(ATTR_UV, this.prop.geom.getAttribute(ATTR_ORIGINAL_UV).clone());\n\n    this.prop.tileSize = panorama.faceSize / panorama.nbTiles;\n    this.prop.facesByTile = CUBE_SEGMENTS / panorama.nbTiles;\n\n    // this.psv.renderer.scene.add(createWireFrame(this.prop.geom));\n\n    setTimeout(() => this.__refresh(true));\n  }\n\n  /**\n   * @private\n   */\n  __setTexture(mesh, texture) {\n    for (let i = 0; i < 6; i++) {\n      let material;\n      if (texture) {\n        if (this.config.flipTopBottom && (i === 2 || i === 3)) {\n          texture[i].center = new THREE.Vector2(0.5, 0.5);\n          texture[i].rotation = Math.PI;\n        }\n\n        material = new THREE.MeshBasicMaterial({ map: texture[i] });\n      }\n      else {\n        material = new THREE.MeshBasicMaterial({ opacity: 0, transparent: true });\n      }\n\n      for (let j = 0; j < NB_GROUPS_BY_FACE; j++) {\n        mesh.material.push(material);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  setTextureOpacity(mesh, opacity) {\n    for (let i = 0; i < 6; i++) {\n      mesh.material[i * NB_GROUPS_BY_FACE].opacity = opacity;\n      mesh.material[i * NB_GROUPS_BY_FACE].transparent = opacity < 1;\n    }\n  }\n\n  /**\n   * @summary Compute visible tiles and load them\n   * @private\n   */\n  __refresh(init = false) { // eslint-disable-line no-unused-vars\n    if (!this.prop.geom) {\n      return;\n    }\n\n    const camera = this.psv.renderer.camera;\n    camera.updateMatrixWorld();\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    frustum.setFromProjectionMatrix(projScreenMatrix);\n\n    const panorama = this.psv.config.panorama;\n    const verticesPosition = this.prop.geom.getAttribute(ATTR_POSITION);\n    const tilesToLoad = [];\n\n    for (let face = 0; face < 6; face++) {\n      for (let col = 0; col < panorama.nbTiles; col++) {\n        for (let row = 0; row < panorama.nbTiles; row++) {\n          // for each tile, find the vertices corresponding to the four corners\n          // if at least one vertex is visible, the tile must be loaded\n          // for larger tiles we also test the four edges centers and the tile center\n          const verticesIndex = [];\n\n          // top-left\n          const v0 = face * NB_VERTICES_BY_PLANE\n            + row * this.prop.facesByTile * CUBE_SEGMENTS * NB_VERTICES_BY_FACE\n            + col * this.prop.facesByTile * NB_VERTICES_BY_FACE;\n\n          // bottom-left\n          const v1 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile - 1) + 1;\n\n          // bottom-right\n          const v2 = v1 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n          // top-right\n          const v3 = v0 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 1;\n\n          verticesIndex.push(v0, v1, v2, v3);\n\n          if (this.prop.facesByTile >= CUBE_SEGMENTS / 2) {\n            // top-center\n            const v4 = v0 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 1;\n\n            // bottom-center\n            const v5 = v1 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 3;\n\n            // left-center\n            const v6 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile / 2 - 1) + 1;\n\n            // right-center\n            const v7 = v6 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n            // center-center\n            const v8 = v6 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4, v5, v6, v7, v8);\n          }\n\n          // if (init && face === 5 && col === 0 && row === 0) {\n          //   verticesIndex.forEach((vertexIdx) => {\n          //     this.psv.renderer.scene.add(createDot(\n          //       verticesPosition.getX(vertexIdx),\n          //       verticesPosition.getY(vertexIdx),\n          //       verticesPosition.getZ(vertexIdx)\n          //     ));\n          //   });\n          // }\n\n          const vertexVisible = verticesIndex.some((vertexIdx) => {\n            vertexPosition.set(\n              verticesPosition.getX(vertexIdx),\n              verticesPosition.getY(vertexIdx),\n              verticesPosition.getZ(vertexIdx)\n            );\n            vertexPosition.applyEuler(this.psv.renderer.meshContainer.rotation);\n            return frustum.containsPoint(vertexPosition);\n          });\n\n          if (vertexVisible) {\n            const angle = vertexPosition.angleTo(this.psv.prop.direction);\n            tilesToLoad.push({ face, col, row, angle });\n          }\n        }\n      }\n    }\n\n    this.__loadTiles(tilesToLoad);\n  }\n\n  /**\n   * @summary Loads tiles and change existing tiles priority\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile[]} tiles\n   * @private\n   */\n  __loadTiles(tiles) {\n    this.queue.disableAllTasks();\n\n    tiles.forEach((tile) => {\n      const id = tileId(tile);\n\n      if (this.prop.tiles[id]) {\n        this.queue.setPriority(id, tile.angle);\n      }\n      else {\n        this.prop.tiles[id] = true;\n        this.queue.enqueue(new Task(id, tile.angle, task => this.__loadTile(tile, task)));\n      }\n    });\n\n    this.queue.start();\n  }\n\n  /**\n   * @summary Loads and draw a tile\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile} tile\n   * @param {PSV.adapters.Task} task\n   * @return {Promise}\n   * @private\n   */\n  __loadTile(tile, task) {\n    const panorama = this.psv.config.panorama;\n\n    let { col, row } = tile;\n    if (this.config.flipTopBottom && (tile.face === 2 || tile.face === 3)) {\n      col = panorama.nbTiles - col - 1;\n      row = panorama.nbTiles - row - 1;\n    }\n    const url = panorama.tileUrl(CUBE_HASHMAP[tile.face], col, row);\n\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'function') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders(url));\n    }\n\n    return new Promise((resolve, reject) => {\n      this.loader.load(url, resolve, undefined, reject);\n    })\n      .then((image) => {\n        if (!task.isCancelled()) {\n          const material = new THREE.MeshBasicMaterial({ map: utils.createTexture(image) });\n          this.__swapMaterial(tile.face, tile.col, tile.row, material);\n          this.psv.needsUpdate();\n        }\n      })\n      .catch(() => {\n        if (!task.isCancelled() && this.config.showErrorTile) {\n          if (!this.prop.errorMaterial) {\n            this.prop.errorMaterial = buildErrorMaterial(this.prop.tileSize, this.prop.tileSize);\n          }\n          this.__swapMaterial(tile.face, tile.col, tile.row, this.prop.errorMaterial);\n          this.psv.needsUpdate();\n        }\n      });\n  }\n\n  /**\n   * @summary Applies a new texture to the faces\n   * @param {int} face\n   * @param {int} col\n   * @param {int} row\n   * @param {external:THREE.MeshBasicMaterial} material\n   * @private\n   */\n  __swapMaterial(face, col, row, material) {\n    const uvs = this.prop.geom.getAttribute(ATTR_UV);\n\n    for (let c = 0; c < this.prop.facesByTile; c++) {\n      for (let r = 0; r < this.prop.facesByTile; r++) {\n        // position of the face (two triangles of the same square)\n        const faceCol = col * this.prop.facesByTile + c;\n        const faceRow = row * this.prop.facesByTile + r;\n\n        // first vertex for this face (6 vertices in total)\n        const firstVertex = NB_VERTICES_BY_PLANE * face + 6 * (CUBE_SEGMENTS * faceRow + faceCol);\n\n        // swap material\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\n        this.prop.materials[matIndex] = material;\n\n        // define new uvs\n        let top = 1 - r / this.prop.facesByTile;\n        let bottom = 1 - (r + 1) / this.prop.facesByTile;\n        let left = c / this.prop.facesByTile;\n        let right = (c + 1) / this.prop.facesByTile;\n\n        if (this.config.flipTopBottom && (face === 2 || face === 3)) {\n          top = 1 - top;\n          bottom = 1 - bottom;\n          left = 1 - left;\n          right = 1 - right;\n        }\n\n        uvs.setXY(firstVertex, left, top);\n        uvs.setXY(firstVertex + 1, left, bottom);\n        uvs.setXY(firstVertex + 2, right, top);\n        uvs.setXY(firstVertex + 3, left, bottom);\n        uvs.setXY(firstVertex + 4, right, bottom);\n        uvs.setXY(firstVertex + 5, right, top);\n      }\n    }\n\n    uvs.needsUpdate = true;\n  }\n\n  /**\n   * @summary Create the texture for the base image\n   * @param {HTMLImageElement} img\n   * @return {external:THREE.Texture}\n   * @override\n   * @private\n   */\n  __createCubemapTexture(img) {\n    if (img.width !== img.height) {\n      utils.logWarn('Invalid base image, the width should equals the height');\n    }\n\n    return createBaseTexture(img, this.config.baseBlur, w => w);\n  }\n\n}\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","DISABLED","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","disableAllTasks","keys","length","nextTask","filter","sort","a","b","pop","buildErrorMaterial","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","THREE","CanvasTexture","MeshBasicMaterial","map","createBaseTexture","img","blur","getHeight","SYSTEM","maxTextureWidth","ratio","Math","min","getMaxCanvasWidth","buffer","drawImage","utils","createTexture","CubemapAdapter","PSVError","CUBE_SEGMENTS","NB_VERTICES_BY_FACE","NB_VERTICES_BY_PLANE","NB_VERTICES","NB_GROUPS_BY_FACE","ATTR_UV","ATTR_ORIGINAL_UV","ATTR_POSITION","tileId","tile","face","col","row","frustum","Frustum","projScreenMatrix","Matrix4","vertexPosition","Vector3","CubemapTilesAdapter","psv","options","config","flipTopBottom","showErrorTile","baseBlur","queue","prop","tileSize","facesByTile","tiles","geom","materials","errorMaterial","loader","ImageLoader","withCredentials","setWithCredentials","requestHeaders","setRequestHeader","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","dispose","handleEvent","e","type","__refresh","mat","supportsTransition","panorama","baseUrl","supportsPreload","loadTexture","faceSize","nbTiles","tileUrl","Promise","reject","isPowerOfTwo","textureData","resolve","createMesh","scale","cubeSize","SPHERE_RADIUS","geometry","BoxGeometry","toNonIndexed","clearGroups","i","k","addGroup","setAttribute","getAttribute","clone","Mesh","setTexture","mesh","transition","__setTexture","material","setTimeout","center","Vector2","rotation","PI","opacity","transparent","j","push","setTextureOpacity","init","camera","renderer","updateMatrixWorld","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","verticesPosition","tilesToLoad","verticesIndex","v0","v1","v2","v3","v4","v5","v6","v7","v8","vertexVisible","some","vertexIdx","set","getX","getY","getZ","applyEuler","meshContainer","containsPoint","angle","angleTo","direction","__loadTiles","__loadTile","url","CUBE_HASHMAP","load","undefined","image","__swapMaterial","needsUpdate","catch","uvs","c","r","faceCol","faceRow","firstVertex","matIndex","groups","find","g","materialIndex","top","bottom","left","right","setXY","__createCubemapTexture","logWarn","w","supportsDownload"],"mappings":"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"}