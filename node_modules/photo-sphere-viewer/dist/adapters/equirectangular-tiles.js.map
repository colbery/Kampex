{"version":3,"file":"equirectangular-tiles.js","sources":["../../src/adapters/shared/Task.js","../../src/adapters/shared/Queue.js","../../src/adapters/shared/tiles-utils.js","../../src/adapters/equirectangular-tiles/index.js"],"sourcesContent":["/**\n * @summary Loading task\n * @memberOf PSV.adapters\n * @private\n */\nexport class Task {\n\n  static STATUS = {\n    DISABLED : -1,\n    PENDING  : 0,\n    RUNNING  : 1,\n    CANCELLED: 2,\n    DONE     : 3,\n    ERROR    : 4,\n  };\n\n  /**\n   * @param {string} id\n   * @param {number} priority\n   * @param {function(Task): Promise} fn\n   */\n  constructor(id, priority, fn) {\n    this.id = id;\n    this.priority = priority;\n    this.fn = fn;\n    this.status = Task.STATUS.PENDING;\n  }\n\n  start() {\n    this.status = Task.STATUS.RUNNING;\n    return this.fn(this)\n      .then(() => {\n        this.status = Task.STATUS.DONE;\n      }, () => {\n        this.status = Task.STATUS.ERROR;\n      });\n  }\n\n  cancel() {\n    this.status = Task.STATUS.CANCELLED;\n  }\n\n  isCancelled() {\n    return this.status === Task.STATUS.CANCELLED;\n  }\n\n}\n","import { Task } from './Task';\n\n/**\n * @summary Loading queue\n * @memberOf PSV.adapters\n * @private\n */\nexport class Queue {\n\n  /**\n   * @param {int} concurency\n   */\n  constructor(concurency = 4) {\n    this.concurency = concurency;\n    this.runningTasks = {};\n    this.tasks = {};\n  }\n\n  enqueue(task) {\n    this.tasks[task.id] = task;\n  }\n\n  clear() {\n    Object.values(this.tasks).forEach(task => task.cancel());\n    this.tasks = {};\n    this.runningTasks = {};\n  }\n\n  setPriority(taskId, priority) {\n    const task = this.tasks[taskId];\n    if (task) {\n      task.priority = priority;\n      if (task.status === Task.STATUS.DISABLED) {\n        task.status = Task.STATUS.PENDING;\n      }\n    }\n  }\n\n  disableAllTasks() {\n    Object.values(this.tasks).forEach((task) => {\n      task.status = Task.STATUS.DISABLED;\n    });\n  }\n\n  start() {\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\n      return;\n    }\n\n    const nextTask = Object.values(this.tasks)\n      .filter(task => task.status === Task.STATUS.PENDING)\n      .sort((a, b) => b.priority - a.priority)\n      .pop();\n\n    if (nextTask) {\n      this.runningTasks[nextTask.id] = true;\n\n      nextTask.start()\n        .then(() => {\n          if (!nextTask.isCancelled()) {\n            delete this.tasks[nextTask.id];\n            delete this.runningTasks[nextTask.id];\n            this.start();\n          }\n        });\n\n      this.start(); // start tasks until max concurrency is reached\n    }\n  }\n\n}\n","import * as THREE from 'three';\nimport { SYSTEM, utils } from '../..';\n\n/**\n * @summary Generates an material for errored tiles\n * @memberOf PSV.adapters\n * @return {external:THREE.MeshBasicMaterial}\n * @private\n */\nexport function buildErrorMaterial(width, height) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n\n  ctx.fillStyle = '#333';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.font = `${canvas.width / 5}px serif`;\n  ctx.fillStyle = '#a22';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('⚠', canvas.width / 2, canvas.height / 2);\n\n  const texture = new THREE.CanvasTexture(canvas);\n  return new THREE.MeshBasicMaterial({ map: texture });\n}\n\n/**\n * @summary Create the texture for the base image\n * @memberOf PSV.adapters\n * @param {HTMLImageElement} img\n * @param {boolean} blur\n * @param {function} getHeight\n * @return {external:THREE.Texture}\n * @private\n */\nexport function createBaseTexture(img, blur, getHeight) {\n  if (blur || img.width > SYSTEM.maxTextureWidth) {\n    const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\n\n    const buffer = document.createElement('canvas');\n    buffer.width = img.width * ratio;\n    buffer.height = getHeight(img.width);\n\n    const ctx = buffer.getContext('2d');\n    if (blur) {\n      ctx.filter = 'blur(1px)';\n    }\n    ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n    return utils.createTexture(buffer);\n  }\n\n  return utils.createTexture(img);\n}\n\n/**\n * @summary Creates a wireframe geometry, for debug\n * @memberOf PSV.adapters\n * @param {THREE.BufferGeometry} geometry\n * @return {THREE.Object3D}\n * @private\n */\nexport function createWireFrame(geometry) {\n  const wireframe = new THREE.WireframeGeometry(geometry);\n  const line = new THREE.LineSegments(wireframe);\n  line.material.depthTest = false;\n  line.material.opacity = 0.25;\n  line.material.transparent = true;\n  return line;\n}\n\n/**\n * @summary Creates a small red sphere, for debug\n * @memberOf PSV.adapters\n * @return {THREE.Object3D}\n * @private\n */\nexport function createDot(x, y, z) {\n  const geom = new THREE.SphereGeometry(0.1);\n  const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n  const mesh = new THREE.Mesh(geom, material);\n  mesh.position.set(x, y, z);\n  return mesh;\n}\n","import * as THREE from 'three';\nimport { CONSTANTS, EquirectangularAdapter, PSVError, utils } from '../..';\nimport { Queue } from '../shared/Queue';\nimport { Task } from '../shared/Task';\nimport { buildErrorMaterial, createBaseTexture } from '../shared/tiles-utils';\n\n\n/**\n * @callback TileUrl\n * @summary Function called to build a tile url\n * @memberOf PSV.adapters.EquirectangularTilesAdapter\n * @param {int} col\n * @param {int} row\n * @returns {string}\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Panorama\n * @summary Configuration of a tiled panorama\n * @property {string} [baseUrl] - low resolution panorama loaded before tiles\n * @property {PSV.PanoData | PSV.PanoDataProvider} [basePanoData] - panoData configuration associated to low resolution panorama loaded before tiles\n * @property {int} width - complete panorama width (height is always width/2)\n * @property {int} cols - number of vertical tiles\n * @property {int} rows - number of horizontal tiles\n * @property {PSV.adapters.EquirectangularTilesAdapter.TileUrl} tileUrl - function to build a tile url\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Options\n * @property {number} [resolution=64] - number of faces of the sphere geometry, higher values may decrease performances\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Tile\n * @private\n * @property {int} col\n * @property {int} row\n * @property {float} angle\n */\n\n/* the faces of the top and bottom rows are made of a single triangle (3 vertices)\n * all other faces are made of two triangles (6 vertices)\n * bellow is the indexing of each face vertices\n *\n * first row faces:\n *     ⋀\n *    /0\\\n *   /   \\\n *  /     \\\n * /1     2\\\n * ¯¯¯¯¯¯¯¯¯\n *\n * other rows faces:\n * _________\n * |\\1    0|\n * |3\\     |\n * |  \\    |\n * |   \\   |\n * |    \\  |\n * |     \\2|\n * |4    5\\|\n * ¯¯¯¯¯¯¯¯¯\n *\n * last row faces:\n * _________\n * \\1     0/\n *  \\     /\n *   \\   /\n *    \\2/\n *     ⋁\n */\n\nconst ATTR_UV = 'uv';\nconst ATTR_ORIGINAL_UV = 'originaluv';\nconst ATTR_POSITION = 'position';\n\nfunction tileId(tile) {\n  return `${tile.col}x${tile.row}`;\n}\n\nconst frustum = new THREE.Frustum();\nconst projScreenMatrix = new THREE.Matrix4();\nconst vertexPosition = new THREE.Vector3();\n\n\n/**\n * @summary Adapter for tiled panoramas\n * @memberof PSV.adapters\n * @extends PSV.adapters.AbstractAdapter\n */\nexport class EquirectangularTilesAdapter extends EquirectangularAdapter {\n\n  static id = 'equirectangular-tiles';\n  static supportsDownload = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    this.psv.config.useXmpData = false;\n\n    /**\n     * @member {PSV.adapters.EquirectangularTilesAdapter.Options}\n     * @private\n     */\n    this.config = {\n      resolution   : 64,\n      showErrorTile: true,\n      baseBlur     : true,\n      ...options,\n    };\n\n    if (!utils.isPowerOfTwo(this.config.resolution)) {\n      throw new PSVError('EquirectangularAdapter resolution must be power of two');\n    }\n\n    this.SPHERE_SEGMENTS = this.config.resolution;\n    this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\n    this.NB_VERTICES_BY_FACE = 6;\n    this.NB_VERTICES_BY_SMALL_FACE = 3;\n    this.NB_VERTICES = 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n      + (this.SPHERE_HORIZONTAL_SEGMENTS - 2) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n    this.NB_GROUPS = this.SPHERE_SEGMENTS * this.SPHERE_HORIZONTAL_SEGMENTS;\n\n    /**\n     * @member {PSV.adapters.Queue}\n     * @private\n     */\n    this.queue = new Queue();\n\n    /**\n     * @type {Object}\n     * @property {int} colSize - size in pixels of a column\n     * @property {int} rowSize - size in pixels of a row\n     * @property {int} facesByCol - number of mesh faces by column\n     * @property {int} facesByRow - number of mesh faces by row\n     * @property {Record<string, boolean>} tiles - loaded tiles\n     * @property {external:THREE.SphereGeometry} geom\n     * @property {external:THREE.MeshBasicMaterial[]} materials\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\n     * @private\n     */\n    this.prop = {\n      colSize      : 0,\n      rowSize      : 0,\n      facesByCol   : 0,\n      facesByRow   : 0,\n      tiles        : {},\n      geom         : null,\n      materials    : [],\n      errorMaterial: null,\n    };\n\n    /**\n     * @member {external:THREE.ImageLoader}\n     * @private\n     */\n    this.loader = new THREE.ImageLoader();\n    if (this.psv.config.withCredentials) {\n      this.loader.setWithCredentials(true);\n    }\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'object') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders);\n    }\n\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n\n    this.__cleanup();\n\n    this.prop.errorMaterial?.map?.dispose();\n    this.prop.errorMaterial?.dispose();\n\n    delete this.queue;\n    delete this.loader;\n    delete this.prop.geom;\n    delete this.prop.errorMaterial;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        this.__refresh();\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Clears loading queue, dispose all materials\n   * @private\n   */\n  __cleanup() {\n    this.queue.clear();\n    this.prop.tiles = {};\n\n    this.prop.materials.forEach((mat) => {\n      mat?.map?.dispose();\n      mat?.dispose();\n    });\n    this.prop.materials.length = 0;\n  }\n\n  /**\n   * @override\n   */\n  supportsTransition(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   */\n  supportsPreload(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Panorama} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    if (typeof panorama !== 'object' || !panorama.width || !panorama.cols || !panorama.rows || !panorama.tileUrl) {\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n    }\n    if (panorama.cols > this.SPHERE_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama cols must not be greater than ${this.SPHERE_SEGMENTS}.`));\n    }\n    if (panorama.rows > this.SPHERE_HORIZONTAL_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama rows must not be greater than ${this.SPHERE_HORIZONTAL_SEGMENTS}.`));\n    }\n    if (!utils.isPowerOfTwo(panorama.cols) || !utils.isPowerOfTwo(panorama.rows)) {\n      return Promise.reject(new PSVError('Panorama cols and rows must be powers of 2.'));\n    }\n\n    const panoData = {\n      fullWidth    : panorama.width,\n      fullHeight   : panorama.width / 2,\n      croppedWidth : panorama.width,\n      croppedHeight: panorama.width / 2,\n      croppedX     : 0,\n      croppedY     : 0,\n      poseHeading  : 0,\n      posePitch    : 0,\n      poseRoll     : 0,\n    };\n\n    if (panorama.baseUrl) {\n      return super.loadTexture(panorama.baseUrl, panorama.basePanoData)\n        .then(textureData => ({\n          panorama: panorama,\n          texture : textureData.texture,\n          panoData: panoData,\n        }));\n    }\n    else {\n      return Promise.resolve({ panorama, panoData });\n    }\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const geometry = new THREE.SphereGeometry(\n      CONSTANTS.SPHERE_RADIUS * scale,\n      this.SPHERE_SEGMENTS,\n      this.SPHERE_HORIZONTAL_SEGMENTS,\n      -Math.PI / 2\n    )\n      .scale(-1, 1, 1)\n      .toNonIndexed();\n\n    geometry.clearGroups();\n    let i = 0;\n    let k = 0;\n    // first row\n    for (; i < this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE; i += this.NB_VERTICES_BY_SMALL_FACE) {\n      geometry.addGroup(i, this.NB_VERTICES_BY_SMALL_FACE, k++);\n    }\n    // second to before last rows\n    for (; i < this.NB_VERTICES - this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE; i += this.NB_VERTICES_BY_FACE) {\n      geometry.addGroup(i, this.NB_VERTICES_BY_FACE, k++);\n    }\n    // last row\n    for (; i < this.NB_VERTICES; i += this.NB_VERTICES_BY_SMALL_FACE) {\n      geometry.addGroup(i, this.NB_VERTICES_BY_SMALL_FACE, k++);\n    }\n\n    geometry.setAttribute(ATTR_ORIGINAL_UV, geometry.getAttribute(ATTR_UV).clone());\n\n    return new THREE.Mesh(geometry, []);\n  }\n\n  /**\n   * @summary Applies the base texture and starts the loading of tiles\n   * @override\n   */\n  setTexture(mesh, textureData, transition) {\n    const { panorama, texture } = textureData;\n\n    if (transition) {\n      this.__setTexture(mesh, texture);\n      return;\n    }\n\n    this.__cleanup();\n    this.__setTexture(mesh, texture);\n\n    this.prop.materials = mesh.material;\n    this.prop.geom = mesh.geometry;\n    this.prop.geom.setAttribute(ATTR_UV, this.prop.geom.getAttribute(ATTR_ORIGINAL_UV).clone());\n\n    this.prop.colSize = panorama.width / panorama.cols;\n    this.prop.rowSize = panorama.width / 2 / panorama.rows;\n    this.prop.facesByCol = this.SPHERE_SEGMENTS / panorama.cols;\n    this.prop.facesByRow = this.SPHERE_HORIZONTAL_SEGMENTS / panorama.rows;\n\n    // this.psv.renderer.scene.add(createWireFrame(this.prop.geom));\n\n    setTimeout(() => this.__refresh(true));\n  }\n\n  /**\n   * @private\n   */\n  __setTexture(mesh, texture) {\n    let material;\n    if (texture) {\n      material = new THREE.MeshBasicMaterial({ map: texture });\n    }\n    else {\n      material = new THREE.MeshBasicMaterial({ opacity: 0, transparent: true });\n    }\n\n    for (let i = 0; i < this.NB_GROUPS; i++) {\n      mesh.material.push(material);\n    }\n  }\n\n  /**\n   * @override\n   */\n  setTextureOpacity(mesh, opacity) {\n    mesh.material[0].opacity = opacity;\n    mesh.material[0].transparent = opacity < 1;\n  }\n\n  /**\n   * @summary Compute visible tiles and load them\n   * @param {boolean} [init=false] Indicates initial call\n   * @private\n   */\n  __refresh(init = false) { // eslint-disable-line no-unused-vars\n    if (!this.prop.geom) {\n      return;\n    }\n\n    const camera = this.psv.renderer.camera;\n    camera.updateMatrixWorld();\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    frustum.setFromProjectionMatrix(projScreenMatrix);\n\n    const panorama = this.psv.config.panorama;\n    const verticesPosition = this.prop.geom.getAttribute(ATTR_POSITION);\n    const tilesToLoad = [];\n\n    for (let col = 0; col < panorama.cols; col++) {\n      for (let row = 0; row < panorama.rows; row++) {\n        // for each tile, find the vertices corresponding to the four corners (three for first and last rows)\n        // if at least one vertex is visible, the tile must be loaded\n        // for larger tiles we also test the four edges centers and the tile center\n\n        const verticesIndex = [];\n\n        if (row === 0) {\n          // bottom-left\n          const v0 = this.prop.facesByRow === 1\n            ? col * this.prop.facesByCol * this.NB_VERTICES_BY_SMALL_FACE + 1\n            : this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + (this.prop.facesByRow - 2) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 4;\n\n          // bottom-right\n          const v1 = this.prop.facesByRow === 1\n            ? v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_SMALL_FACE + 1\n            : v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE + 1;\n\n          // top (all vertices are equal)\n          const v2 = 0;\n\n          verticesIndex.push(v0, v1, v2);\n\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n            // bottom-center\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4);\n          }\n\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n            // left-center\n            const v6 = v0 - this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            // right-center\n            const v7 = v1 - this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v6, v7);\n          }\n        }\n        else if (row === panorama.rows - 1) {\n          // top-left\n          const v0 = this.prop.facesByRow === 1\n            ? -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_SMALL_FACE + 1\n            : -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 1;\n\n          // top-right\n          const v1 = this.prop.facesByRow === 1\n            ? v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_SMALL_FACE - 1\n            : v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE - 1;\n\n          // bottom (all vertices are equal)\n          const v2 = this.NB_VERTICES - 1;\n\n          verticesIndex.push(v0, v1, v2);\n\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n            // top-center\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4);\n          }\n\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n            // left-center\n            const v6 = v0 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            // right-center\n            const v7 = v1 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v6, v7);\n          }\n        }\n        else {\n          // top-left\n          const v0 = -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 1;\n\n          // bottom-left\n          const v1 = v0 + (this.prop.facesByRow - 1) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE + 3;\n\n          // bottom-right\n          const v2 = v1 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE + 1;\n\n          // top-right\n          const v3 = v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE - 1;\n\n          verticesIndex.push(v0, v1, v2, v3);\n\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n            // top-center\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            // bottom-center\n            const v5 = v1 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4, v5);\n          }\n\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n            // left-center\n            const v6 = v0 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            // right-center\n            const v7 = v3 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v6, v7);\n\n            if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n              // center-center\n              const v8 = v6 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n              verticesIndex.push(v8);\n            }\n          }\n        }\n\n        // if (init && col === 0 && row === 0) {\n        //   verticesIndex.forEach((vertexIdx) => {\n        //     this.psv.renderer.scene.add(createDot(\n        //       verticesPosition.getX(vertexIdx),\n        //       verticesPosition.getY(vertexIdx),\n        //       verticesPosition.getZ(vertexIdx)\n        //     ));\n        //   });\n        // }\n\n        const vertexVisible = verticesIndex.some((vertexIdx) => {\n          vertexPosition.set(\n            verticesPosition.getX(vertexIdx),\n            verticesPosition.getY(vertexIdx),\n            verticesPosition.getZ(vertexIdx)\n          );\n          vertexPosition.applyEuler(this.psv.renderer.meshContainer.rotation);\n          return frustum.containsPoint(vertexPosition);\n        });\n\n        if (vertexVisible) {\n          let angle = vertexPosition.angleTo(this.psv.prop.direction);\n          if (row === 0 || row === panorama.rows - 1) {\n            angle *= 2; // lower priority to top and bottom tiles\n          }\n          tilesToLoad.push({ col, row, angle });\n        }\n      }\n    }\n\n    this.__loadTiles(tilesToLoad);\n  }\n\n  /**\n   * @summary Loads tiles and change existing tiles priority\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile[]} tiles\n   * @private\n   */\n  __loadTiles(tiles) {\n    this.queue.disableAllTasks();\n\n    tiles.forEach((tile) => {\n      const id = tileId(tile);\n\n      if (this.prop.tiles[id]) {\n        this.queue.setPriority(id, tile.angle);\n      }\n      else {\n        this.prop.tiles[id] = true;\n        this.queue.enqueue(new Task(id, tile.angle, task => this.__loadTile(tile, task)));\n      }\n    });\n\n    this.queue.start();\n  }\n\n  /**\n   * @summary Loads and draw a tile\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile} tile\n   * @param {PSV.adapters.Task} task\n   * @return {Promise}\n   * @private\n   */\n  __loadTile(tile, task) {\n    const panorama = this.psv.config.panorama;\n    const url = panorama.tileUrl(tile.col, tile.row);\n\n    if (this.psv.config.requestHeaders && typeof this.psv.config.requestHeaders === 'function') {\n      this.loader.setRequestHeader(this.psv.config.requestHeaders(url));\n    }\n\n    return new Promise((resolve, reject) => {\n      this.loader.load(url, resolve, undefined, reject);\n    })\n      .then((image) => {\n        if (!task.isCancelled()) {\n          const material = new THREE.MeshBasicMaterial({ map: utils.createTexture(image) });\n          this.__swapMaterial(tile.col, tile.row, material);\n          this.psv.needsUpdate();\n        }\n      })\n      .catch(() => {\n        if (!task.isCancelled() && this.config.showErrorTile) {\n          if (!this.prop.errorMaterial) {\n            this.prop.errorMaterial = buildErrorMaterial(this.prop.colSize, this.prop.rowSize);\n          }\n          this.__swapMaterial(tile.col, tile.row, this.prop.errorMaterial);\n          this.psv.needsUpdate();\n        }\n      });\n  }\n\n  /**\n   * @summary Applies a new texture to the faces\n   * @param {int} col\n   * @param {int} row\n   * @param {external:THREE.MeshBasicMaterial} material\n   * @private\n   */\n  __swapMaterial(col, row, material) {\n    const uvs = this.prop.geom.getAttribute(ATTR_UV);\n\n    for (let c = 0; c < this.prop.facesByCol; c++) {\n      for (let r = 0; r < this.prop.facesByRow; r++) {\n        // position of the face (two triangles of the same square)\n        const faceCol = col * this.prop.facesByCol + c;\n        const faceRow = row * this.prop.facesByRow + r;\n        const isFirstRow = faceRow === 0;\n        const isLastRow = faceRow === (this.SPHERE_HORIZONTAL_SEGMENTS - 1);\n\n        // first vertex for this face (3 or 6 vertices in total)\n        let firstVertex;\n        if (isFirstRow) {\n          firstVertex = faceCol * this.NB_VERTICES_BY_SMALL_FACE;\n        }\n        else if (isLastRow) {\n          firstVertex = this.NB_VERTICES\n            - this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + faceCol * this.NB_VERTICES_BY_SMALL_FACE;\n        }\n        else {\n          firstVertex = this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + (faceRow - 1) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + faceCol * this.NB_VERTICES_BY_FACE;\n        }\n\n        // swap material\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\n        this.prop.materials[matIndex] = material;\n\n        // define new uvs\n        const top = 1 - r / this.prop.facesByRow;\n        const bottom = 1 - (r + 1) / this.prop.facesByRow;\n        const left = c / this.prop.facesByCol;\n        const right = (c + 1) / this.prop.facesByCol;\n\n        if (isFirstRow) {\n          uvs.setXY(firstVertex, (left + right) / 2, top);\n          uvs.setXY(firstVertex + 1, left, bottom);\n          uvs.setXY(firstVertex + 2, right, bottom);\n        }\n        else if (isLastRow) {\n          uvs.setXY(firstVertex, right, top);\n          uvs.setXY(firstVertex + 1, left, top);\n          uvs.setXY(firstVertex + 2, (left + right) / 2, bottom);\n        }\n        else {\n          uvs.setXY(firstVertex, right, top);\n          uvs.setXY(firstVertex + 1, left, top);\n          uvs.setXY(firstVertex + 2, right, bottom);\n          uvs.setXY(firstVertex + 3, left, top);\n          uvs.setXY(firstVertex + 4, left, bottom);\n          uvs.setXY(firstVertex + 5, right, bottom);\n        }\n      }\n    }\n\n    uvs.needsUpdate = true;\n  }\n\n  /**\n   * @summary Create the texture for the base image\n   * @param {HTMLImageElement} img\n   * @return {external:THREE.Texture}\n   * @private\n   */\n  __createBaseTexture(img) {\n    if (img.width !== img.height * 2) {\n      utils.logWarn('Invalid base image, the width should be twice the height');\n    }\n\n    return createBaseTexture(img, this.config.baseBlur, w => w / 2);\n  }\n\n}\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","DISABLED","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","disableAllTasks","keys","length","nextTask","filter","sort","a","b","pop","buildErrorMaterial","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","THREE","CanvasTexture","MeshBasicMaterial","map","createBaseTexture","img","blur","getHeight","SYSTEM","maxTextureWidth","ratio","Math","min","getMaxCanvasWidth","buffer","drawImage","utils","createTexture","ATTR_UV","ATTR_ORIGINAL_UV","ATTR_POSITION","tileId","tile","col","row","frustum","Frustum","projScreenMatrix","Matrix4","vertexPosition","Vector3","EquirectangularTilesAdapter","psv","options","config","useXmpData","resolution","showErrorTile","baseBlur","isPowerOfTwo","PSVError","SPHERE_SEGMENTS","SPHERE_HORIZONTAL_SEGMENTS","NB_VERTICES_BY_FACE","NB_VERTICES_BY_SMALL_FACE","NB_VERTICES","NB_GROUPS","queue","prop","colSize","rowSize","facesByCol","facesByRow","tiles","geom","materials","errorMaterial","loader","ImageLoader","withCredentials","setWithCredentials","requestHeaders","setRequestHeader","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","dispose","handleEvent","e","type","__refresh","mat","supportsTransition","panorama","baseUrl","supportsPreload","loadTexture","cols","rows","tileUrl","Promise","reject","panoData","fullWidth","fullHeight","croppedWidth","croppedHeight","croppedX","croppedY","poseHeading","posePitch","poseRoll","basePanoData","textureData","resolve","createMesh","scale","geometry","SphereGeometry","SPHERE_RADIUS","PI","toNonIndexed","clearGroups","i","k","addGroup","setAttribute","getAttribute","clone","Mesh","setTexture","mesh","transition","__setTexture","material","setTimeout","opacity","transparent","push","setTextureOpacity","init","camera","renderer","updateMatrixWorld","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","verticesPosition","tilesToLoad","verticesIndex","v0","v1","v2","v4","v6","v7","v3","v5","v8","vertexVisible","some","vertexIdx","set","getX","getY","getZ","applyEuler","meshContainer","rotation","containsPoint","angle","angleTo","direction","__loadTiles","__loadTile","url","load","undefined","image","__swapMaterial","needsUpdate","catch","uvs","c","r","faceCol","faceRow","isFirstRow","isLastRow","firstVertex","matIndex","groups","find","g","materialIndex","top","bottom","left","right","setXY","__createBaseTexture","logWarn","w","EquirectangularAdapter","supportsDownload"],"mappings":"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"}